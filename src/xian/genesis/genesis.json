{
    "genesis_time": "2024-02-08T00:17:23.342520258Z",
    "chain_id": "hypercore",
    "initial_height": "0",
    "consensus_params":
    {
        "block":
        {
            "max_bytes": "22020096",
            "max_gas": "-1",
            "time_iota_ms": "1000"
        },
        "evidence":
        {
            "max_age_num_blocks": "100000",
            "max_age_duration": "172800000000000",
            "max_bytes": "1048576"
        },
        "validator":
        {
            "pub_key_types": ["ed25519"]
        },
        "version":
        {}
    },
    "validators": [
    {
        "address": "8ABB2DE01AE15C5F4EBD0D4455C6BCD9047B7CBB",
        "pub_key":
        {
            "type": "tendermint/PubKeyEd25519",
            "value": "7gajTPCL9yzlktJtNrkMedq6KCm6ljSZLQNDGBYNSfk="
        },
        "power": "10",
        "name": ""
    }],
    "app_hash": "",
    "abci_genesis":
    {
        "hash": "2bb4e112aca11805538842bd993470f18f337797ec3f2f6ab02c47385caf088e",
        "number": "0",
        "hlc_timestamp": "0000-00-00T00:00:00.000000000Z_0",
        "previous": "0000000000000000000000000000000000000000000000000000000000000000",
        "genesis": [
        {
            "key": "currency.__code__",
            "value": "__balances = Hash(default_value=0, contract='currency', name='balances')\n\n\ndef ____(vk: str):\n    __balances[vk] = 111111111\n\n\n@__export('currency')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[sender] >= amount, 'Not enough coins to send!'\n    __balances[sender] -= amount\n    __balances[to] += amount\n\n\n@__export('currency')\ndef balance_of(account: str):\n    return __balances[account]\n\n\n@__export('currency')\ndef allowance(owner: str, spender: str):\n    return __balances[owner, spender]\n\n\n@__export('currency')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    __balances[sender, to] += amount\n    return __balances[sender, to]\n\n\n@__export('currency')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[main_account, sender\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, sender], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, sender] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
        },
        {
            "key": "currency.__compiled__",
            "value":
            {
                "__bytes__": "e30000000000000000000000000700000000000000f328010000970002006500640064016402ac03a6030000ab0300000000000000005a01640465026602640584045a03020065046401a6010000ab0100000000000000006406650564076502660464088404a6000000ab0000000000000000005a06020065046401a6010000ab010000000000000000640965026602640a8404a6000000ab0000000000000000005a07020065046401a6010000ab010000000000000000640b6502640c65026604640d8404a6000000ab0000000000000000005a08020065046401a6010000ab01000000000000000064066505640765026604640e8404a6000000ab0000000000000000005a09020065046401a6010000ab0100000000000000006406650564076502640f6502660664108404a6000000ab0000000000000000005a0a641153002912e900000000da0863757272656e6379da0862616c616e6365732903da0d64656661756c745f76616c7565da08636f6e7472616374da046e616d65da02766b630100000000000000000000000300000003000000f31a000000970064017400000000000000000000007c003c0000006400530029024e69c76b9f06a901da0a5f5f62616c616e63657329017208000000730100000020da00da045f5f5f5f720d00000004000000730f0000008000d8151e854a8872814e804e804ef300000000da06616d6f756e74da02746f630200000000000000000000000400000003000000f3c800000097007c0064016b0400000000730a4a006402a6000000ab00000000000000000082017400000000000000000000006a0100000000000000007d027404000000000000000000007c02190000000000000000007c006b0500000000730a4a006403a6000000ab00000000000000000082017404000000000000000000007c0278027802190000000000000000007c007a170000630363023c0000007404000000000000000000007c0178027802190000000000000000007c007a0d0000630363023c0000006400530029044e7202000000fa1e43616e6e6f742073656e64206e656761746976652062616c616e63657321fa194e6f7420656e6f75676820636f696e7320746f2073656e6421a903da03637478da0663616c6c6572720b000000a903720f0000007210000000da0673656e6465727303000000202020720c000000da087472616e7366657272190000000800000073720000008000e00b1190418a3a883a883ad01737893a8c3a883add0d108c5a8046dd0b159066d40b1da016d20b27d00b27d00b27d02944d10b27d40b27d00b27dd040e8876d00416d00416d404169826d10420d00416d00416d10416dd040e8872804e804e844e9066d1041c804e804e814e804e804e720e000000da076163636f756e74630100000000000000000000000200000003000000f31c00000097007400000000000000000000007c00190000000000000000005300a9014e720a0000002901721a000000730100000020720c000000da0a62616c616e63655f6f66721d00000011000000730d0000008000e50b159067d40b1ed0041e720e000000da056f776e6572da077370656e646572630200000000000000000000000300000003000000f32000000097007400000000000000000000007c007c016602190000000000000000005300721c000000720a0000002902721e000000721f00000073020000002020720c000000da09616c6c6f77616e636572210000001600000073110000008000e50b1590659857906ed40b25d00425720e000000630200000000000000000000000400000003000000f38600000097007c0064016b0400000000730a4a006402a6000000ab00000000000000000082017400000000000000000000006a0100000000000000007d027404000000000000000000007c027c01660278027802190000000000000000007c007a0d0000630363023c0000007404000000000000000000007c027c01660219000000000000000000530029034e72020000007212000000721400000072170000007303000000202020720c000000da07617070726f766572230000001b000000734c0000008000e00b1190418a3a883a883ad01737893a8c3a883add0d108c5a8046dd040e88769072887ad0041ad0041ad4041a9866d10424d0041ad0041ad1041add0b1590669862906ad40b21d00421720e000000da0c6d61696e5f6163636f756e74630300000000000000000000000600000003000000f37201000097007c0064016b0400000000730a4a006402a6000000ab00000000000000000082017400000000000000000000006a0100000000000000007d037404000000000000000000007c027c036602190000000000000000007c006b0500000000732b4a006403a00300000000000000000000000000000000000000007404000000000000000000007c027c036602190000000000000000007c00a6020000ab020000000000000000a6000000ab00000000000000000082017404000000000000000000007c02190000000000000000007c006b0500000000730a4a006404a6000000ab00000000000000000082017404000000000000000000007c027c03660278027802190000000000000000007c007a170000630363023c0000007404000000000000000000007c0278027802190000000000000000007c007a170000630363023c0000007404000000000000000000007c0178027802190000000000000000007c007a0d0000630363023c0000006400530029054e720200000072120000007a494e6f7420656e6f75676820636f696e7320617070726f76656420746f2073656e642120596f752068617665207b7d20616e642061726520747279696e6720746f207370656e64207b7d7213000000290472150000007216000000720b000000da06666f726d61742904720f000000721000000072240000007218000000730400000020202020720c000000da0d7472616e736665725f66726f6d72270000002300000073e70000008000e00b1190418a3a883a883ad01737893a8c3a883add0d108c5a8046dd0b15906ca046d0162af400010c0ad80d13f203010c14f000010c14f000010c14d81560d71567d21567dd0812903ca016d01327d40828a826f103011632f400011632f103010c14f400010c14f000010c14f506000c16906cd40b23a076d20b2dd00b2dd00b2dd02f4ad10b2dd40b2dd00b2ddd040e887c9856d00f23d00424d00424d40424a806d1042ed00424d00424d10424dd040e887cd0041cd0041cd4041ca006d10426d0041cd0041cd1041cdd040e8872804e804e844e9066d1041c804e804e814e804e804e720e0000004e290bda0448617368720b000000da03737472720d000000da085f5f6578706f7274da05666c6f61747219000000721d000000722100000072230000007227000000a900720e000000720c000000fa083c6d6f64756c653e722d00000001000000735d010000f003010101d80d118854a001a84ab85ad00d48d10d48d40d48800af00601011f8853f00001011ff00001011ff00001011ff00001011ff00800020a8018882ad10115d40115f00205011d9055f00005011da003f00005011df00005011df00005011df103000216d40115f00205011df01000020a8018882ad10115d40115f00201011f9803f00001011ff00001011ff00001011ff103000216d40115f00201011ff00800020a8018882ad10115d40115f0020101269053f000010126a033f000010126f000010126f000010126f103000216d40115f002010126f00800020a8018882ad10115d40115f0020401229045f0000401229873f000040122f000040122f000040122f103000216d40115f002040122f00e00020a8018882ad10115d40115f00209011d9825f00009011da053f00009011db803f00009011df00009011df00009011df103000216d40115f00209011df00009011df00009011d720e000000"
            }
        },
        {
            "key": "currency.__developer__",
            "value": "sys"
        },
        {
            "key": "currency.__submitted__",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        },
        {
            "key": "currency.balances:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
            "value": 111111111
        },
        {
            "key": "dao.S:motion_delay",
            "value":
            {
                "__delta__": [1, 0]
            }
        },
        {
            "key": "dao.S:motion_period",
            "value":
            {
                "__delta__": [1, 0]
            }
        },
        {
            "key": "dao.S:nays",
            "value": 0
        },
        {
            "key": "dao.S:yays",
            "value": 0
        },
        {
            "key": "dao.__code__",
            "value": "import currency\nimport election_house\n__S = Hash(contract='dao', name='S')\n__pending_motions = Variable(contract='dao', name='pending_motions')\n\n\ndef ____():\n    __S['motion_period'] = datetime.DAYS * 1\n    __S['motion_delay'] = datetime.DAYS * 1\n    __pending_motions.set({'pending_motions': []})\n    __reset()\n\n\n@__export('dao')\ndef current_value():\n    return __pending_motions.get()['pending_motions']\n\n\n@__export('dao')\ndef vote(vk: str, obj: list):\n    __finalize_pending_motions()\n    assert isinstance(obj, list), 'Pass a list!'\n    if len(obj) == 0:\n        return\n    assert vk in election_house.current_value_for_policy('masternodes'\n        ), 'Not a member.'\n    if __S['motion_start'] is None:\n        recipient_vk, amount = obj\n        __assert_recipient_vk_and_amount_is_valid(recipient_vk, amount)\n        __S['recipient_vk'] = recipient_vk\n        __S['amount'] = amount\n        __S['motion_start'] = now\n    else:\n        if now - __S['motion_start'] >= __S['motion_period']:\n            __reset()\n            return\n        position, = obj\n        __assert_vote_is_valid(vk, position)\n        __S['positions', vk] = position\n        if position:\n            __S['yays'] += 1\n        else:\n            __S['nays'] += 1\n        total_votes = __S['yays'] + __S['nays']\n        if total_votes >= len(election_house.current_value_for_policy(\n            'masternodes')) * 3 // 5 + 1:\n            if __S['yays'] >= total_votes * 7 // 10 + 1:\n                __pass_motion()\n            elif __S['nays'] >= total_votes * 7 // 10 + 1:\n                __reset()\n\n\ndef __pass_motion():\n    motions = __pending_motions.get()['pending_motions']\n    motions += [{'motion_passed': now, 'recipient_vk': __S['recipient_vk'],\n        'amount': __S['amount']}]\n    __pending_motions.set({'pending_motions': motions})\n    __reset()\n\n\ndef __finalize_pending_motions():\n    motions = __pending_motions.get()['pending_motions']\n    for motion in motions[:]:\n        if now - motion['motion_passed'] >= __S['motion_delay']:\n            currency.transfer(amount=motion['amount'], to=motion[\n                'recipient_vk'])\n            motions.remove(motion)\n    __pending_motions.set({'pending_motions': motions})\n\n\ndef __reset():\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S['motion_start'] = None\n    __S['recipient_vk'] = None\n    __S['amount'] = None\n    __S.clear('positions')\n\n\ndef __assert_recipient_vk_and_amount_is_valid(vk: str, amount: int):\n    assert vk is not None, 'No recipient VK provided.'\n    assert isinstance(vk, str), 'Recipient VK is not a string.'\n    assert len(vk) == 64, 'Recipient VK is not 64 characters.'\n    int(vk, 16)\n    assert amount is not None, 'No amount provided.'\n    assert isinstance(amount, int), 'Amount is not an integer.'\n    assert amount > 0, 'Amount is not greater than zero.'\n\n\ndef __assert_vote_is_valid(vk: str, position: bool):\n    assert __S['positions', vk] is None, 'VK already voted.'\n    assert isinstance(position, bool), 'Invalid position.'\n"
        },
        {
            "key": "dao.__compiled__",
            "value":
            {
                "__bytes__": "e30000000000000000000000000500000000000000f3dc0000009700640064016c005a00640064016c015a010200650264026403ac04a6020000ab0200000000000000005a030200650464026405ac04a6020000ab0200000000000000005a05640684005a06020065076402a6010000ab01000000000000000064078400a6000000ab0000000000000000005a08020065076402a6010000ab010000000000000000640865096409650a6604640a8404a6000000ab0000000000000000005a0b640b84005a0c640c84005a0d640d84005a0e64086509640e650f6604640f84045a1064086509641065116604641184045a12640153002912e9000000004eda0364616fda01532902da08636f6e7472616374da046e616d65da0f70656e64696e675f6d6f74696f6e73630000000000000000000000000400000003000000f3b600000097007400000000000000000000006a01000000000000000064017a05000074040000000000000000000064023c0000007400000000000000000000006a01000000000000000064017a05000074040000000000000000000064033c000000740600000000000000000000a0040000000000000000000000000000000000000000640467006901a6010000ab0100000000000000000100740b00000000000000000000a6000000ab00000000000000000001006400530029054ee901000000da0d6d6f74696f6e5f706572696f64da0c6d6f74696f6e5f64656c617972070000002906da086461746574696d65da0444415953da035f5f53da115f5f70656e64696e675f6d6f74696f6e73da03736574da075f5f7265736574a900f300000000da00da045f5f5f5f721500000007000000734b0000008000dd1b239c3da831d11b2c8543880fd10418dd1a229c2da821d11a2b8543880ed10417dd0415d70419d20419d01b2ca862d01a31d10432d40432d00432dd040b814984498049804980497213000000630000000000000000000000000200000003000000f3400000009700740000000000000000000000a0010000000000000000000000000000000000000000a6000000ab000000000000000000640119000000000000000000530029024e72070000002902720f000000da03676574721200000072130000007214000000da0d63757272656e745f76616c756572180000000e000000731a0000008000e50b1cd70b20d20b20d10b22d40b22d02334d40b35d004357213000000da02766bda036f626a630200000000000000000000000600000003000000f3980300009700740100000000000000000000a6000000ab00000000000000000001007403000000000000000000007c01740400000000000000000000a6020000ab020000000000000000730a4a006401a6000000ab00000000000000000082017407000000000000000000007c01a6010000ab01000000000000000064026b02000000007202640053007c007409000000000000000000006a0500000000000000006403a6010000ab0100000000000000007600730a4a006404a6000000ab0000000000000000008201740c00000000000000000000640519000000000000000000803a7c015c0200007d027d03740f000000000000000000007c027c03a6020000ab02000000000000000001007c02740c0000000000000000000064063c0000007c03740c0000000000000000000064073c000000741000000000000000000000740c0000000000000000000064053c00000064005300741000000000000000000000740c000000000000000000006405190000000000000000007a0a0000740c000000000000000000006408190000000000000000006b05000000007210741300000000000000000000a6000000ab0000000000000000000100640053007c015c0100007d047415000000000000000000007c007c04a6020000ab02000000000000000001007c04740c0000000000000000000064097c0066023c0000007c047216740c00000000000000000000640a7802780219000000000000000000640b7a0d0000630363023c0000006e15740c00000000000000000000640c7802780219000000000000000000640b7a0d0000630363023c000000740c00000000000000000000640a19000000000000000000740c00000000000000000000640c190000000000000000007a0000007d057c057407000000000000000000007409000000000000000000006a0500000000000000006403a6010000ab010000000000000000a6010000ab010000000000000000640d7a050000640e7a020000640b7a0000006b05000000007254740c00000000000000000000640a190000000000000000007c05640f7a05000064107a020000640b7a0000006b05000000007210741700000000000000000000a6000000ab000000000000000000010064005300740c00000000000000000000640c190000000000000000007c05640f7a05000064107a020000640b7a0000006b05000000007212741300000000000000000000a6000000ab000000000000000000010064005300640053006400530029114e7a0c506173732061206c697374217202000000da0b6d61737465726e6f6465737a0d4e6f742061206d656d6265722eda0c6d6f74696f6e5f7374617274da0c726563697069656e745f766bda06616d6f756e74720a000000da09706f736974696f6e73da04796179737209000000da046e617973e903000000e905000000e907000000e90a000000290cda1a5f5f66696e616c697a655f70656e64696e675f6d6f74696f6e73da0a6973696e7374616e6365da046c697374da036c656eda0e656c656374696f6e5f686f757365da1863757272656e745f76616c75655f666f725f706f6c696379720e000000da295f5f6173736572745f726563697069656e745f766b5f616e645f616d6f756e745f69735f76616c6964da036e6f777211000000da165f5f6173736572745f766f74655f69735f76616c6964da0d5f5f706173735f6d6f74696f6e29067219000000721a000000721e000000721f000000da08706f736974696f6eda0b746f74616c5f766f74657373060000002020202020207214000000da04766f746572330000001300000073fb0100008000e5041ed10420d40420d00420dd0b1590639d34d10b20d40b20d00430d00430a02ed10430d40430d00430dd070a8833817884789031827d807dd8080e8806d80b0d951ed41138b81df10001120af40001120af000010c0af000010c0af000010c0ad80b1af103010c0af400010c0af000010c0ae5070a883ed4071ad00722d81f22d1081c880c9066dd0831b02cc006d10847d40847d00847d81e2a8d03884ed1081bd8181e8d038848890ddd1e218d03884ed1081bd0081bd0081be50b0e9513905ed41124d10b24ad03a84fd4283cd20b3cd00b3cdd0c1389498c498849d80c128846d8141789098808dd081e9872a038d1082cd4082cd0082cd81f278d03884b9812884fd1081cd80b13f00003091ddd0c0f9006884b884b8c4b9831d10c1c884b884b894b884be50c0f9006884b884b8c4b9831d10c1c884b884b894bdd16199826946ba543a806a44bd1162f880bd80b169d239d6ed41e45d80c19f103011f1bf400011f1bf100011b1cf400011b1cd81e1ff103011b20d82324f103011b25d82728f103011b29f200010c29f000010c29e50f1290368c7b986ba841996fb012d11e33b061d11e37d20f37d00f37dd101d910f940f900f900f900fdd11149056941ba00ba861a10fb032d12035b801d12039d21139d01139dd101791099409900990099009f00b010c29f000010c29f00800123ad011397213000000630000000000000000000000000500000003000000f3e20000009700740000000000000000000000a0010000000000000000000000000000000000000000a6000000ab0000000000000000006401190000000000000000007d007c0074040000000000000000000074060000000000000000000064021900000000000000000074060000000000000000000064031900000000000000000064049c0367017a0d00007d00740000000000000000000000a004000000000000000000000000000000000000000064017c006901a6010000ab0100000000000000000100740b00000000000000000000a6000000ab00000000000000000001006400530029054e7207000000721e000000721f0000002903da0d6d6f74696f6e5f706173736564721e000000721f0000002906720f0000007217000000722e000000720e000000721000000072110000002901da076d6f74696f6e737301000000207214000000723000000072300000003500000073690000008000dd0e1fd70e23d20e23d10e25d40e25d02637d40e388047d8040ba523b573b83ed4374add12159068942df003011121f000011121f000011022f1000105228047e50415d70419d20419d01b2ca867d01a36d10437d40437d00437dd040b814984498049804980497213000000630000000000000000000000000600000003000000f3420100009700740000000000000000000000a0010000000000000000000000000000000000000000a6000000ab0000000000000000006401190000000000000000007d007c006400640085021900000000000000000044005d587d017404000000000000000000007c016402190000000000000000007a0a00007406000000000000000000006403190000000000000000006b050000000072377409000000000000000000006a0500000000000000007c016404190000000000000000007c01640519000000000000000000ac06a6020000ab02000000000000000001007c00a00600000000000000000000000000000000000000007c01a6010000ab01000000000000000001008c59740000000000000000000000a007000000000000000000000000000000000000000064017c006901a6010000ab01000000000000000001006400530029074e72070000007235000000720b000000721f000000721e0000002902721f000000da02746f2908720f0000007217000000722e000000720e000000da0863757272656e6379da087472616e73666572da0672656d6f7665721000000029027236000000da066d6f74696f6e730200000020207214000000722700000072270000003d00000073a80000008000dd0e1fd70e23d20e23d10e25d40e25d02637d40e388047d81219982198219821942af000040523f0000405238806dd0b0e9016980fd41128d10b28ad43b00ed42c3fd20b3fd00b3fdd0c14d40c1da056a848d42535b826d8101ef403013b20f000010d21f100010d21f400010d21f000010d21e00c138f4e8a4e9836d10c22d40c22d00c22f8dd0415d70419d20419d01b2ca867d01a36d10437d40437d00437d00437d004377213000000630000000000000000000000000300000003000000f39e0000009700640174000000000000000000000064023c000000640174000000000000000000000064033c000000640074000000000000000000000064043c000000640074000000000000000000000064053c000000640074000000000000000000000064063c000000740000000000000000000000a00100000000000000000000000000000000000000006407a6010000ab01000000000000000001006400530029084e720200000072210000007222000000721d000000721e000000721f00000072200000002902720e000000da05636c656172721200000072130000007214000000721100000072110000004700000073490000008000d8121385438806814bd8121385438806814bd81a1e8543880ed10417d81a1e8543880ed10417d8141885438808814ddd040787498249886bd1041ad4041ad0041ad0041ad0041a7213000000721f000000630200000000000000000000000400000003000000f32c01000097007c00800a4a006401a6000000ab00000000000000000082017401000000000000000000007c00740200000000000000000000a6020000ab020000000000000000730a4a006402a6000000ab00000000000000000082017405000000000000000000007c00a6010000ab01000000000000000064036b0200000000730a4a006404a6000000ab00000000000000000082017407000000000000000000007c006405a6020000ab02000000000000000001007c01800a4a006406a6000000ab00000000000000000082017401000000000000000000007c01740600000000000000000000a6020000ab020000000000000000730a4a006407a6000000ab00000000000000000082017c0164086b0400000000730a4a006409a6000000ab000000000000000000820164005300290a4e7a194e6f20726563697069656e7420564b2070726f76696465642e7a1d526563697069656e7420564b206973206e6f74206120737472696e672ee9400000007a22526563697069656e7420564b206973206e6f7420363420636861726163746572732ee9100000007a134e6f20616d6f756e742070726f76696465642e7a19416d6f756e74206973206e6f7420616e20696e74656765722e72020000007a20416d6f756e74206973206e6f742067726561746572207468616e207a65726f2e29047228000000da03737472722a000000da03696e7429027219000000721f000000730200000020207214000000722d000000722d0000005000000073a40000008000d80b0d883e883ed01b36893e8c3e883edd0b1590629d23d10b1ed40b1ed0043fd0043fd0203fd1043fd4043fd0043fdd0b0e887289378c3790628a3d883d883dd01a3e893d8c3d883ddd040788028842814b844b804bd80b11d00b1dd00b1dd01f34d10b1dd40b1dd00b1ddd0b1590669d63d10b22d40b22d0043fd0043fd0243fd1043fd4043fd0043fd80b1190418a3a883a883ad01739893a8c3a883a883a883a72130000007231000000630200000000000000000000000400000003000000f376000000970074000000000000000000000064017c00660219000000000000000000810a4a006402a6000000ab00000000000000000082017403000000000000000000007c01740400000000000000000000a6020000ab020000000000000000730a4a006403a6000000ab00000000000000000082016400530029044e72200000007a11564b20616c726561647920766f7465642e7a11496e76616c696420706f736974696f6e2e2903720e0000007228000000da04626f6f6c290272190000007231000000730200000020207214000000722f000000722f0000005a00000073450000008000dd0b0e887b9842887fd40b1fd00b27d00b27d0293cd10b27d40b27d00b27dd0b159068a504d10b25d40b25d0043ad0043ad0273ad1043ad4043ad0043ad0043ad0043a721300000029137239000000722b000000da0448617368720e000000da085661726961626c65720f0000007215000000da085f5f6578706f727472180000007242000000722900000072330000007230000000722700000072110000007243000000722d0000007245000000722f000000721200000072130000007214000000fa083c6d6f64756c653e7249000000010000007328010000f003010101d8000f800f800f800fd80015d00015d00015d00015d8060a80649045a003d00624d10624d406248003d8141c9048a065d03243d01444d11444d41444d00011f00604010ef00004010ef00004010ef00e00020a80188825811f841ff002010136f000010136f103000211841ff002010136f00800020a80188825811f841ff0021e011a8853f0001e011a9074f0001e011af0001e011af0001e011af103000211841ff0021e011af0420105010ef00005010ef00005010ef010070138f000070138f000070138f01406011bf00006011bf00006011bf01207013ab023f00007013ab873f00007013af00007013af00007013af00007013af01402013b9873f00002013ba864f00002013bf00002013bf00002013bf00002013bf00002013bf00002013b7213000000"
            }
        },
        {
            "key": "dao.__developer__",
            "value": "sys"
        },
        {
            "key": "dao.__owner__",
            "value": "election_house"
        },
        {
            "key": "dao.__submitted__",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        },
        {
            "key": "dao.pending_motions",
            "value":
            {
                "pending_motions": []
            }
        },
        {
            "key": "elect_masternodes.__code__",
            "value": "import currency\nimport election_house\n__candidate_state = Hash(contract='elect_masternodes', name='candidate_state')\n__top_candidate = Variable(contract='elect_masternodes', name='top_candidate')\n__no_confidence_state = Hash(contract='elect_masternodes', name=\n    'no_confidence_state')\n__last_candidate = Variable(contract='elect_masternodes', name='last_candidate'\n    )\n__to_be_relinquished = Variable(contract='elect_masternodes', name=\n    'to_be_relinquished')\nSTAMP_COST = 20\n__member_cost = Variable(contract='elect_masternodes', name='member_cost')\n__controller = Variable(contract='elect_masternodes', name='controller')\n\n\ndef ____(policy: str='members', cost: int=500000):\n    __controller.set(policy)\n    __member_cost.set(cost)\n\n\n@__export('elect_masternodes')\ndef register():\n    assert not __candidate_state['registered', ctx.caller\n        ], 'Already registered.'\n    currency.transfer_from(__member_cost.get(), ctx.this, ctx.caller)\n    __candidate_state['registered', ctx.caller] = True\n    __candidate_state['votes', ctx.caller] = 0\n    if __top_candidate.get() is None:\n        __top_candidate.set(ctx.caller)\n\n\n@__export('elect_masternodes')\ndef unregister():\n    mns = election_house.current_value_for_policy(__controller.get())\n    assert __candidate_state['registered', ctx.caller], 'Not registered.'\n    assert ctx.caller not in mns, \"Can't unstake if in governance.\"\n    currency.transfer(__member_cost.get(), ctx.caller)\n    __candidate_state['registered', ctx.caller] = False\n    __candidate_state['votes', ctx.caller] = 0\n\n\n@__export('elect_masternodes')\ndef vote_candidate(address: str):\n    assert __candidate_state['registered', address\n        ], 'Candidate not registered.'\n    v = __candidate_state['last_voted', ctx.caller]\n    assert v is None or now - v > datetime.DAYS * 1, 'Voting again too soon.'\n    vote_cost = STAMP_COST / election_house.current_value_for_policy(\n        'stamp_cost')\n    currency.transfer_from(vote_cost, 'blackhole', ctx.caller)\n    __candidate_state['last_voted', ctx.caller] = now\n    votes = __candidate_state['votes', address]\n    if votes is None:\n        __candidate_state['votes', address] = 1\n    else:\n        __candidate_state['votes', address] += 1\n    if __top_candidate.get() is not None:\n        if __candidate_state['votes', address] > __candidate_state['votes',\n            __top_candidate.get()]:\n            __top_candidate.set(address)\n\n\n@__export('elect_masternodes')\ndef top_member():\n    return __top_candidate.get()\n\n\n@__export('elect_masternodes')\ndef pop_top():\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    top = top_member()\n    if top is None:\n        return None\n    __candidate_state.clear('votes')\n    __top_candidate.set(None)\n\n\n@__export('elect_masternodes')\ndef vote_no_confidence(address: str):\n    assert address in election_house.current_value_for_policy(__controller.\n        get()), 'Cannot vote against a non-committee member'\n    v = __no_confidence_state['last_voted', ctx.caller]\n    assert v is None or now - v > datetime.DAYS * 1, 'Voting again too soon.'\n    vote_cost = STAMP_COST / election_house.current_value_for_policy(\n        'stamp_cost')\n    currency.transfer_from(vote_cost, 'blackhole', ctx.caller)\n    __no_confidence_state['last_voted', ctx.caller] = now\n    if __no_confidence_state['votes', address] is None:\n        __no_confidence_state['votes', address] = 1\n    else:\n        __no_confidence_state['votes', address] += 1\n    if __last_candidate.get() is None:\n        __last_candidate.set(address)\n    elif __no_confidence_state['votes', address] > __no_confidence_state[\n        'votes', __last_candidate.get()]:\n        __last_candidate.set(address)\n\n\n@__export('elect_masternodes')\ndef last_member():\n    r = __to_be_relinquished.get()\n    if r is not None:\n        return r\n    return __last_candidate.get()\n\n\n@__export('elect_masternodes')\ndef pop_last():\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    r = __to_be_relinquished.get()\n    if r is not None:\n        __no_confidence_state['votes', r] = 0\n        __to_be_relinquished.set(None)\n    else:\n        __no_confidence_state.clear('votes')\n        __candidate_state['registered', __last_candidate.get()] = False\n        __last_candidate.set(None)\n\n\n@__export('elect_masternodes')\ndef force_removal(address: str):\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    __candidate_state['registered', address] = False\n\n\n@__export('elect_masternodes')\ndef relinquish():\n    assert ctx.caller in election_house.current_value_for_policy(__controller\n        .get())\n    r = __to_be_relinquished.get()\n    assert r is None, 'Someone is already trying to relinquish!'\n    __to_be_relinquished.set(ctx.caller)\n"
        },
        {
            "key": "elect_masternodes.__compiled__",
            "value":
            {
                "__bytes__": ""
            }
        },
        {
            "key": "elect_masternodes.__developer__",
            "value": "sys"
        },
        {
            "key": "elect_masternodes.__owner__",
            "value": "election_house"
        },
        {
            "key": "elect_masternodes.__submitted__",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        },
        {
            "key": "elect_masternodes.controller",
            "value": "masternodes"
        },
        {
            "key": "elect_masternodes.member_cost",
            "value": 100000
        },
        {
            "key": "election_house.__code__",
            "value": "I = importlib\n__policies = Hash(contract='election_house', name='policies')\npolicy_interface = [I.Func('vote', args=('vk', 'obj')), I.Func('current_value')\n    ]\n\n\n@__export('election_house')\ndef register_policy(contract: str):\n    if __policies[contract] is None:\n        p = I.import_module(contract)\n        assert I.owner_of(p\n            ) == ctx.this, 'Election house must control the policy contract!'\n        assert I.enforce_interface(p, policy_interface\n            ), 'Policy contract does not follow the correct interface'\n        __policies[contract] = True\n    else:\n        raise Exception('Policy already registered')\n\n\n@__export('election_house')\ndef current_value_for_policy(policy: str):\n    assert __policies[policy] is not None, f'Invalid policy: {policy}.'\n    p = I.import_module(policy)\n    return p.current_value()\n\n\n@__export('election_house')\ndef vote(policy: str, value: Any):\n    assert __policies[policy] is not None, 'Invalid policy.'\n    p = I.import_module(policy)\n    p.vote(vk=ctx.caller, obj=value)\n"
        },
        {
            "key": "election_house.__compiled__",
            "value":
            {
                "__bytes__": "e30000000000000000000000000500000000000000f30a010000970065005a010200650264006401ac02a6020000ab0200000000000000005a036501a004000000000000000000000000000000000000000064036404ac05a6020000ab0200000000000000006501a00400000000000000000000000000000000000000006406a6010000ab01000000000000000067025a05020065066400a6010000ab01000000000000000064076507660264088404a6000000ab0000000000000000005a08020065066400a6010000ab010000000000000000640965076602640a8404a6000000ab0000000000000000005a09020065066400a6010000ab01000000000000000064096507640b650a6604640c8404a6000000ab0000000000000000005a0b640d5300290eda0e656c656374696f6e5f686f757365da08706f6c69636965732902da08636f6e7472616374da046e616d65da04766f7465a902da02766bda036f626a2901da0461726773da0d63757272656e745f76616c75657204000000630100000000000000000000000400000003000000f33e01000097007400000000000000000000007c00190000000000000000008082740200000000000000000000a00200000000000000000000000000000000000000007c00a6010000ab0100000000000000007d01740200000000000000000000a00300000000000000000000000000000000000000007c01a6010000ab0100000000000000007408000000000000000000006a0500000000000000006b0200000000730a4a006401a6000000ab0000000000000000008201740200000000000000000000a00600000000000000000000000000000000000000007c01740e00000000000000000000a6020000ab020000000000000000730a4a006402a6000000ab000000000000000000820164037400000000000000000000007c003c000000640053007411000000000000000000006404a6010000ab010000000000000000820129054e7a30456c656374696f6e20686f757365206d75737420636f6e74726f6c2074686520706f6c69637920636f6e7472616374217a35506f6c69637920636f6e747261637420646f6573206e6f7420666f6c6c6f772074686520636f727265637420696e74657266616365547a19506f6c69637920616c726561647920726567697374657265642909da0a5f5f706f6c6963696573da0149da0d696d706f72745f6d6f64756c65da086f776e65725f6f66da03637478da0474686973da11656e666f7263655f696e74657266616365da10706f6c6963795f696e74657266616365da09457863657074696f6e29027204000000da017073020000002020da00da0f72656769737465725f706f6c69637972180000000700000073af0000008000e507119028d4071bd00723dd0c0d8f4f8a4f9848d10c25d40c258801dd0f108f7a8a7a9821f10001100ef40001100edd11149418f20301101af00001101af00001101ad81b4df10301101af40001101af00001101ae50f10d70f22d20f22a031d52636f10001100ef40001100ef00001094701f00001094701d80f46f10301094701f40001094701f00001094701e01f238d0a9038d1081cd0081cd0081ce50e17d01833d10e34d40e34d00834f300000000da06706f6c696379630100000000000000000000000400000003000000f39400000097007400000000000000000000007c0019000000000000000000800e4a0064017c009b0064029d03a6000000ab0000000000000000008201740200000000000000000000a00200000000000000000000000000000000000000007c00a6010000ab0100000000000000007d017c01a0030000000000000000000000000000000000000000a6000000ab000000000000000000530029034e7a10496e76616c696420706f6c6963793a20fa012e2904720d000000720e000000720f000000720b0000002902721a0000007216000000730200000020207217000000da1863757272656e745f76616c75655f666f725f706f6c696379721d0000001400000073480000008000e50b159066d40b1dd00b29d00b29d02b47b866d02b47d02b47d02b47d10b29d40b29d00b29dd08098f0f8a0f9806d1081fd4081f8041d80b0c8f3f8a3fd10b1cd40b1cd0041c7219000000da0576616c7565630200000000000000000000000400000003000000f3aa00000097007400000000000000000000007c0019000000000000000000800a4a006401a6000000ab0000000000000000008201740200000000000000000000a00200000000000000000000000000000000000000007c00a6010000ab0100000000000000007d027c02a00300000000000000000000000000000000000000007408000000000000000000006a0500000000000000007c01ac02a6020000ab02000000000000000001006400530029034e7a0f496e76616c696420706f6c6963792e72070000002906720d000000720e000000720f00000072060000007211000000da0663616c6c65722903721a000000721e000000721600000073030000002020207217000000720600000072060000001b000000734b0000008000e50b159066d40b1dd00b29d00b29d02b3cd10b29d40b29d00b29dd08098f0f8a0f9806d1081fd4081f8041d80405874682468d638c6a98658046d10424d40424d00424d00424d0042472190000004e290cda09696d706f72746c6962720e000000da0448617368720d000000da0446756e637214000000da085f5f6578706f7274da037374727218000000721d000000da03416e797206000000a90072190000007217000000fa083c6d6f64756c653e72280000000100000073f2000000f003010101d8040d8001d80d118854d01b2bb02ad00d3dd10d3dd40d3d800ad81415974692469836a80d9046d11436d41436b801bf06ba06b87fd1384fd4384ff000011406d00010f00800020a8018d00a1ad1011bd4011bf0020901359863f000090135f000090135f000090135f10300021cd4011bf002090135f01800020a8018d00a1ad1011bd4011bf00203011da053f00003011df00003011df00003011df10300021cd4011bf00203011df00c00020a8018d00a1ad1011bd4011bf0020301259013f0000301259853f000030125f000030125f000030125f10300021cd4011bf002030125f000030125f0000301257219000000"
            }
        },
        {
            "key": "election_house.__developer__",
            "value": "sys"
        },
        {
            "key": "election_house.__submitted__",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        },
        {
            "key": "election_house.policies:dao",
            "value": true
        },
        {
            "key": "election_house.policies:masternodes",
            "value": true
        },
        {
            "key": "election_house.policies:rewards",
            "value": true
        },
        {
            "key": "election_house.policies:stamp_cost",
            "value": true
        },
        {
            "key": "foundation.__code__",
            "value": "import currency\n__owner = Variable(contract='foundation', name='owner')\n\n\ndef ____(vk: str):\n    __owner.set(vk)\n\n\n@__export('foundation')\ndef withdraw(amount: float):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    currency.transfer(amount, ctx.caller)\n\n\n@__export('foundation')\ndef change_owner(vk: str):\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    __owner.set(vk)\n"
        },
        {
            "key": "foundation.__compiled__",
            "value":
            {
                "__bytes__": "e30000000000000000000000000400000000000000f3900000009700640064016c005a000200650164026403ac04a6020000ab0200000000000000005a02640565036602640684045a04020065056402a6010000ab01000000000000000064076506660264088404a6000000ab0000000000000000005a07020065056402a6010000ab01000000000000000064056503660264098404a6000000ab0000000000000000005a0864015300290ae9000000004eda0a666f756e646174696f6eda056f776e65722902da08636f6e7472616374da046e616d65da02766b630100000000000000000000000300000003000000f33a0000009700740000000000000000000000a00100000000000000000000000000000000000000007c00a6010000ab01000000000000000001006400530029014e2902da075f5f6f776e6572da03736574a9017207000000730100000020da00da045f5f5f5f720d0000000500000073150000008000dd040b874b824b9002814f844f804f804f804ff300000000da06616d6f756e74630100000000000000000000000400000003000000f3c600000097007c0064016b0400000000730a4a006402a6000000ab00000000000000000082017400000000000000000000006a010000000000000000740400000000000000000000a0030000000000000000000000000000000000000000a6000000ab0000000000000000006b0200000000730a4a006403a6000000ab00000000000000000082017409000000000000000000006a0500000000000000007c007400000000000000000000006a010000000000000000a6020000ab02000000000000000001006400530029044e72020000007a1e43616e6e6f742073656e64206e656761746976652062616c616e63657321fa0a4e6f74206f776e6572212906da03637478da0663616c6c65727209000000da03676574da0863757272656e6379da087472616e736665722901720f000000730100000020720c000000da08776974686472617772170000000900000073540000008000e00b1190418a3a883a883ad01737893a8c3a883add0b0e8c3a9d179f1b9a1b991d9c1dd20b26d00b26d00b26a80cd10b26d40b26d00b26dd040cd4041590669d639c6ad10429d40429d00429d00429d00429720e000000630100000000000000000000000300000003000000f39c00000097007400000000000000000000006a010000000000000000740400000000000000000000a0030000000000000000000000000000000000000000a6000000ab0000000000000000006b0200000000730a4a006401a6000000ab0000000000000000008201740400000000000000000000a00400000000000000000000000000000000000000007c00a6010000ab01000000000000000001006400530029024e721100000029057212000000721300000072090000007214000000720a000000720b000000730100000020720c000000da0c6368616e67655f6f776e657272190000001000000073380000008000e50b0e8c3a9d179f1b9a1b991d9c1dd20b26d00b26d00b26a80cd10b26d40b26d00b26dd040b874b824b9002814f844f804f804f804f720e00000029097215000000da085661726961626c657209000000da03737472720d000000da085f5f6578706f7274da05666c6f617472170000007219000000a900720e000000720c000000fa083c6d6f64756c653e721f0000000100000073ab000000f003010101d8000f800f800f800fd80a128828984ca877d00a37d10a37d40a378007f0060101148853f000010114f000010114f000010114f000010114f00800020a8018882cd10117d40117f00203012a9055f00003012af00003012af00003012af103000218d40117f00203012af00c00020a8018882cd10117d40117f0020201149053f000020114f000020114f000020114f103000218d40117f002020114f000020114f000020114720e000000"
            }
        },
        {
            "key": "foundation.__developer__",
            "value": "sys"
        },
        {
            "key": "foundation.__submitted__",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        },
        {
            "key": "foundation.owner",
            "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
        },
        {
            "key": "masternodes.S:current_motion",
            "value": 0
        },
        {
            "key": "masternodes.S:members",
            "value": ["ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"]
        },
        {
            "key": "masternodes.S:motion_opened",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        },
        {
            "key": "masternodes.S:nays",
            "value": 0
        },
        {
            "key": "masternodes.S:yays",
            "value": 0
        },
        {
            "key": "masternodes.__code__",
            "value": "INTRODUCE_MOTION = 'introduce_motion'\nVOTE_ON_MOTION = 'vote_on_motion'\nNO_MOTION = 0\nREMOVE_MEMBER = 1\nADD_SEAT = 2\nREMOVE_SEAT = 3\nVOTING_PERIOD = datetime.DAYS * 1\n__S = Hash(contract='masternodes', name='S')\n__minimum_nodes = Variable(contract='masternodes', name='minimum_nodes')\n__candidate_contract = Variable(contract='masternodes', name=\n    'candidate_contract')\n\n\ndef ____(initial_members: list, minimum: int=1, candidate: str='elect_members'\n    ):\n    __S['members'] = initial_members\n    __minimum_nodes.set(minimum)\n    __candidate_contract.set(candidate)\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S['current_motion'] = NO_MOTION\n    __S['motion_opened'] = now\n\n\n@__export('masternodes')\ndef quorum_max():\n    return int(len(__S['members']) * 2 / 3) + 1\n\n\n@__export('masternodes')\ndef quorum_min():\n    return min(quorum_max(), __minimum_nodes.get())\n\n\n@__export('masternodes')\ndef current_value():\n    return __S['members']\n\n\n@__export('masternodes')\ndef vote(vk: str, obj: list):\n    assert isinstance(obj, list), 'Pass a list!'\n    arg = None\n    if len(obj) == 3:\n        action, position, arg = obj\n    else:\n        action, position = obj\n    __assert_vote_is_valid(vk, action, position, arg)\n    if action == INTRODUCE_MOTION:\n        __introduce_motion(position, arg)\n    else:\n        assert __S['current_motion'] != NO_MOTION, 'No motion proposed.'\n        if now - __S['motion_opened'] >= VOTING_PERIOD:\n            __reset()\n        assert __S['positions', vk] is None, 'VK already voted.'\n        if position is True:\n            __S['yays'] += 1\n            __S['positions', vk] = position\n        else:\n            __S['nays'] += 1\n            __S['positions', vk] = position\n        if __S['yays'] >= len(__S['members']) // 2 + 1:\n            __pass_current_motion()\n            __reset()\n        elif __S['nays'] >= len(__S['members']) // 2 + 1:\n            __reset()\n\n\ndef __assert_vote_is_valid(vk: str, action: str, position: bool, arg: Any=None\n    ):\n    assert vk in __S['members'], 'Not a member.'\n    assert action in [INTRODUCE_MOTION, VOTE_ON_MOTION], 'Invalid action.'\n    if action == INTRODUCE_MOTION:\n        assert __S['current_motion'] == NO_MOTION, 'Already in motion.'\n        assert 0 < position <= REMOVE_SEAT, 'Invalid motion.'\n        if position == REMOVE_MEMBER:\n            __assert_vk_is_valid(arg)\n    elif action == VOTE_ON_MOTION:\n        assert isinstance(position, bool), 'Invalid position'\n\n\ndef __assert_vk_is_valid(vk: str):\n    assert vk is not None, 'No VK provided.'\n    assert isinstance(vk, str), 'VK not a string.'\n    assert len(vk) == 64, 'VK is not 64 characters.'\n    int(vk, 16)\n\n\ndef __introduce_motion(position: int, arg: Any):\n    assert position <= REMOVE_SEAT, 'Invalid position.'\n    if position == REMOVE_MEMBER:\n        assert arg in __S['members'], 'Member does not exist.'\n        assert len(__S['members']) > __minimum_nodes.get(\n            ), 'Cannot drop below current quorum.'\n        __S['member_in_question'] = arg\n    __S['current_motion'] = position\n    __S['motion_opened'] = now\n\n\ndef __pass_current_motion():\n    current_motion = __S['current_motion']\n    members = __S['members']\n    if current_motion == REMOVE_MEMBER:\n        members.remove(__S['member_in_question'])\n    elif current_motion == ADD_SEAT:\n        member_candidates = importlib.import_module(__candidate_contract.get())\n        new_mem = member_candidates.top_member()\n        if new_mem is not None:\n            members.append(new_mem)\n            member_candidates.pop_top()\n    elif current_motion == REMOVE_SEAT:\n        member_candidates = importlib.import_module(__candidate_contract.get())\n        old_mem = member_candidates.last_member()\n        if old_mem is not None:\n            members.remove(old_mem)\n            member_candidates.pop_last()\n    __S['members'] = members\n\n\ndef __reset():\n    __S['current_motion'] = NO_MOTION\n    __S['member_in_question'] = None\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S.clear('positions')\n"
        },
        {
            "key": "masternodes.__compiled__",
            "value":
            {
                "__bytes__": ""
            }
        },
        {
            "key": "masternodes.__developer__",
            "value": "sys"
        },
        {
            "key": "masternodes.__owner__",
            "value": "election_house"
        },
        {
            "key": "masternodes.__submitted__",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        },
        {
            "key": "masternodes.candidate_contract",
            "value": "elect_masternodes"
        },
        {
            "key": "masternodes.minimum_nodes",
            "value": 1
        },
        {
            "key": "rewards.S:current_votes:blackhole",
            "value": 0
        },
        {
            "key": "rewards.S:current_votes:developer",
            "value": 0
        },
        {
            "key": "rewards.S:current_votes:foundation",
            "value": 0
        },
        {
            "key": "rewards.S:current_votes:masternodes",
            "value": 0
        },
        {
            "key": "rewards.S:election_max_length",
            "value":
            {
                "__delta__": [1, 0]
            }
        },
        {
            "key": "rewards.S:master_contract",
            "value": "masternodes"
        },
        {
            "key": "rewards.S:value",
            "value": [
            {
                "__fixed__": "0.88"
            },
            {
                "__fixed__": "0.01"
            },
            {
                "__fixed__": "0.01"
            },
            {
                "__fixed__": "0.1"
            }]
        },
        {
            "key": "rewards.S:vote_count",
            "value": 0
        },
        {
            "key": "rewards.__code__",
            "value": "import election_house\n__S = Hash(contract='rewards', name='S')\n\n\ndef ____(initial_split: list=[decimal('0.88'), decimal('0.01'), decimal(\n    '0.01'), decimal('0.1')], master_contract='masternodes',\n    election_max_length=datetime.DAYS * 1):\n    __S['value'] = initial_split\n    __S['master_contract'] = master_contract\n    __S['election_max_length'] = election_max_length\n    __S['vote_count'] = 0\n    __reset_current_votes()\n\n\ndef __reset_current_votes():\n    __S['current_votes', 'masternodes'] = 0\n    __S['current_votes', 'blackhole'] = 0\n    __S['current_votes', 'foundation'] = 0\n    __S['current_votes', 'developer'] = 0\n\n\n@__export('rewards')\ndef current_value():\n    return __S['value']\n\n\n@__export('rewards')\ndef vote(vk: str, obj: list):\n    if __S['election_start'] is None:\n        total_nodes = len(election_house.current_value_for_policy(__S[\n            'master_contract']))\n        __S['vote_count'] = 0\n        __S['min_votes_required'] = total_nodes * 2 // 3 + 1\n        __S['election_start'] = now\n        __S.clear('has_voted')\n        __reset_current_votes()\n        __tally_vote(vk, obj)\n    else:\n        __tally_vote(vk, obj)\n        if __election_is_over():\n            __update_value()\n            __S['election_start'] = None\n\n\ndef __update_value():\n    masternode_votes = __S['current_votes', 'masternodes'] or 1\n    blackhole_votes = __S['current_votes', 'blackhole'] or 1\n    foundation_votes = __S['current_votes', 'foundation'] or 1\n    developer_votes = __S['current_votes', 'developer'] or 1\n    total_votes = (masternode_votes + blackhole_votes + foundation_votes +\n        developer_votes)\n    mn = masternode_votes / total_votes\n    bh = blackhole_votes / total_votes\n    fd = foundation_votes / total_votes\n    dv = developer_votes / total_votes\n    __S['value'] = [mn, bh, fd, dv]\n\n\ndef __election_is_over():\n    return __S['vote_count'] >= __S['min_votes_required'] or now - __S[\n        'election_start'] >= __S['election_max_length']\n\n\ndef __tally_vote(vk: str, obj: list):\n    __validate_vote(vk, obj)\n    a, b, c, d = obj\n    __S['current_votes', 'masternodes'] += a\n    __S['current_votes', 'blackhole'] += b\n    __S['current_votes', 'foundation'] += c\n    __S['current_votes', 'developer'] += d\n    __S['has_voted', vk] = True\n    __S['vote_count'] += 1\n\n\ndef __validate_vote(vk: str, obj: list):\n    assert vk in election_house.current_value_for_policy(__S['master_contract']\n        ), 'Not allowed to vote!'\n    assert isinstance(obj, list), 'Pass a list!'\n    assert len(obj) == 4, 'Must have 4 elements!'\n    s = 0\n    for o in obj:\n        assert int(o) >= 0, 'No non-negative numbers!'\n        s += o\n    assert s == 100, 'Elements must add to 100!'\n    assert __S['has_voted', vk] is None, 'VK has already voted!'\n"
        },
        {
            "key": "rewards.__compiled__",
            "value":
            {
                "__bytes__": ""
            }
        },
        {
            "key": "rewards.__developer__",
            "value": "sys"
        },
        {
            "key": "rewards.__owner__",
            "value": "election_house"
        },
        {
            "key": "rewards.__submitted__",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        },
        {
            "key": "stamp_cost.S:current_total",
            "value": 20
        },
        {
            "key": "stamp_cost.S:election_max_length",
            "value":
            {
                "__delta__": [1, 0]
            }
        },
        {
            "key": "stamp_cost.S:master_contract",
            "value": "masternodes"
        },
        {
            "key": "stamp_cost.S:value",
            "value": 20
        },
        {
            "key": "stamp_cost.S:vote_count",
            "value": 1
        },
        {
            "key": "stamp_cost.__code__",
            "value": "import election_house\n__S = Hash(contract='stamp_cost', name='S')\n\n\ndef ____(initial_rate: int=100, master_contract='masternodes',\n    election_max_length=datetime.DAYS * 1):\n    __S['value'] = initial_rate\n    __S['master_contract'] = master_contract\n    __S['election_max_length'] = election_max_length\n    __S['vote_count'] = 1\n    __reset_current_votes()\n\n\ndef __reset_current_votes():\n    __S['current_total'] = __S['value']\n\n\n@__export('stamp_cost')\ndef current_value():\n    return __S['value']\n\n\n@__export('stamp_cost')\ndef vote(vk: str, obj: int):\n    if __S['election_start'] is None:\n        total_nodes = len(election_house.current_value_for_policy(__S[\n            'master_contract']))\n        __S['vote_count'] = 1\n        __S['min_votes_required'] = total_nodes * 2 // 3 + 1\n        __S['election_start'] = now\n        __S.clear('has_voted')\n        __reset_current_votes()\n        __tally_vote(vk, obj)\n    else:\n        __tally_vote(vk, obj)\n        if __election_is_over():\n            __update_value()\n            __S['election_start'] = None\n\n\ndef __update_value():\n    __S['value'] = int(__S['current_total'] / __S['vote_count']) or 1\n\n\ndef __election_is_over():\n    return __S['vote_count'] >= __S['min_votes_required'] or now - __S[\n        'election_start'] >= __S['election_max_length']\n\n\ndef __tally_vote(vk: str, obj: int):\n    __validate_vote(vk, obj)\n    __S['current_total'] += obj\n    __S['has_voted', vk] = True\n    __S['vote_count'] += 1\n\n\ndef __validate_vote(vk: str, obj: int):\n    assert vk in election_house.current_value_for_policy(__S['master_contract']\n        ), 'Not allowed to vote!'\n    assert isinstance(obj, int), 'Pass an int!'\n    assert obj > 0, 'No negatives!'\n    assert __S['value'] / 2 <= obj <= __S['value'] * 2, 'Out of range!'\n    assert __S['has_voted', vk] is None, 'Already voted!'\n"
        },
        {
            "key": "stamp_cost.__compiled__",
            "value":
            {
                "__bytes__": ""
            }
        },
        {
            "key": "stamp_cost.__developer__",
            "value": "sys"
        },
        {
            "key": "stamp_cost.__owner__",
            "value": "election_house"
        },
        {
            "key": "stamp_cost.__submitted__",
            "value":
            {
                "__time__": [2024, 3, 14, 1, 6, 0, 0]
            }
        }],
        "origin":
        {
            "signature": "04755bea173bce8946e2d91caacd1e829ffaae9a639aab3a7ff9bd9212674c4813a4f44e9ab49d84bd4bec1f9b130c68bb0bf56348ecf859e94afd49936e760d",
            "sender": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
        }
    }
}